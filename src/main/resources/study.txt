https://taetoungs-branch.tistory.com/157

 Anonymous 사용자가 아니고 Remember-me 기능으로 로그인 하지 않은 사용자 일 경우
출처: https://to-dy.tistory.com/75 [todyDev:티스토리]


https://wikidocs.net/268499 프로젝트 공부 시큐리티만 없음\


여긴 에러코드 https://keeeeeepgoing.tistory.com/175

https://velog.io/@cyseok123/Spring-Security 시큐리티 여기에서 적용함

https://codevang.tistory.com/266

https://okky.kr/questions/924154



여긴 에러코드 https://keeeeeepgoing.tistory.com/175

여기도 시큐리티 202050311 여기도 적용함
https://isaac-christian.tistory.com/entry/Spring-Security-%EA%B6%8C%ED%95%9C-%EB%B6%80%EC%97%AC-%EB%B0%8F-%EC%95%94%ED%98%B8%ED%99%94-%EA%B5%AC%ED%98%84#security-context.xml-1

https://popo015.tistory.com/38  <security:authentication-provider user-service-ref="loginUserDetailService"> db 커스텀 체크 하는중 

https://velog.io/@cksdnr066/%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0-JDBC%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%9D%B8%EC%A6%9D%EC%9D%B8%EA%B0%80-%EC%B2%98%EB%A6%AC

authentication-success-handler-ref="" 검색하여 성공
https://kimsaemjava.tistory.com/251 시큐리티 여기서 보고 이해좀함 ㅠㅠ 2025 03 09
https://to-dy.tistory.com/94 여기도 공부도움 여기도 된다.




해야할일 뒤로가기 눌렀을때 해야할일

타일즐 적용 

타임리프 거지같네 ㅠㅠ




------------------------------------------------------------------------------------------------------------------------------------------
플러그인 JSON Formatter
------------------------------------------------------------------------------------------------------------------------------------------
https://chromewebstore.google.com/detail/json-formatter/mhimpmpmffogbmmkmajibklelopddmjf/related?utm_source=chrome-ntp-icon&pli=1

------------------------------------------------------------------------------------------------------------------------------------------
타임리프 공식사이트
------------------------------------------------------------------------------------------------------------------------------------------
https://www.thymeleaf.org/doc/tutorials/3.0/thymeleafspring.html

------------------------------------------------------------------------------------------------------------------------------------------
4.2. JUnit CSRF 공격 테스트
------------------------------------------------------------------------------------------------------------------------------------------
https://memo-the-day.tistory.com/145



스프링뷰트에서 시큐리티 + JWT 사용
https://velog.io/@jkijki12/Spirng-Security-Jwt-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0

------------------------------------------------------------------------------------------------------------------------------------------
출처: https://determination.tistory.com/entry/스프링-시큐리티Spring-Security-CSRF-설정AJAX-POST-FORM [내삶발전기록용:티스토리]
------------------------------------------------------------------------------------------------------------------------------------------
보통 CSRF 옵션은 POST, DELETE, UPDATE에만 적용합니다.
보안 수준이 높은 정보를 가져오는 GET 메서드라면 예외적으로 CSRF 방어 전략을 사용할 수 있습니다.
 
제가 진행하는 프로젝트의 경우 Form 데이터의 경우 POST 메서드에만
CSRF 방어 전략을 적용하기로 했습니다.
 
또한 AJAX로 통신하는 경우
헤더에 토큰 정보를 보내지 않을 경우
'403' 에러가 발생하는 것을 확인했습니다.
 
따라서 AJAX로 발생하는 'GET, POST, UPDATE, DELETE' 메서드 모두
CSRF 방어 전략을 적용하기로 했습니다.
 
 
 
✅ Form 태그와 AJAX에 CSRF 방어 적용

Form 태그입니다.
스프링 시큐리티가 세팅한 CSRF 토큰 값이 세션에 저장되어 있습니다.
이 값을 Form 데이터를 전송할 때 같이 전송해줍니다.
 
다음과 같은 코드를 POST 요청 시 포함하면 됩니다.
<input type="hidden" th:name="${_csrf.parameterName}" th:value="${_csrf.token}">
 
 
AJAX입니다.
우선 HTML 페이지에 토큰 값을 세팅해줍니다.
다음 HTML문을 <header> 태그에 추가해줍니다.
 
<meta name="_csrf" th:content="${_csrf.token}"/>
<meta name="_csrf_header" th:content="${_csrf.headerName}"/>
 
 
다음은 JavaScript입니다.
CSRF 토큰 정보를 변수에 저장합니다.
 
const token = $("meta[name='_csrf']").attr("content")
const header = $("meta[name='_csrf_header']").attr("content");
const name = $("#userName").val();
 

$(function () {
    var token = $("meta[name='_csrf']").attr("content");
    var header = $("meta[name='_csrf_header']").attr("content");
    $(document).ajaxSend(function(e, xhr, options) {
        xhr.setRequestHeader(header, token);
    });
});
 
마지막으로 AJAX입니다.
$.ajax({
    type:"POST",
    url:"/comments/save/reply/" + data.writer_id,
    dataType : 'json',
    contentType: 'application/json; charset=utf-8',
    data: JSON.stringify(data),
    cache : false,
    
    //추가해야 하는 부분
    beforeSend : function(xhr) {
        xhr.setRequestHeader(header, token);
    },
 
beforeSend로 위와 같이 요청 헤더에 CSRF 토큰 값을 세팅합니다.
 
 
해당 옵션을 적용하면 AJAX로 통신할 경우
'403'에러가 더 이상 발생하지 않습니다.
 
스프링 시큐리티를 이용한 CSRF 토큰 생성을 통한 방어 방식 말고도
서버에서 request의 referrer를 확인하여 도메인이 일치하는지 검증하는
'Referrer 방식'도 있으니 경우에 따라 선택하여 적용하면 될 것 같습니다.

------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------
https://www.devyummi.com/  시큐리티 뷰트 
------------------------------------------------------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------------------------------------------------------
csrf  대한 공부
------------------------------------------------------------------------------------------------------------------------------------------
https://velog.io/@lcy960729/Spring-Security%EC%9D%98-%EA%B8%B0%EB%8A%A5-%EC%B5%9C%EC%A2%85-%EC%88%98%EC%A0%95-%EB%82%A0%EC%A7%9C-2021-02-22
------------------------------------------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------
// 데이터를 POST로 전송하는 함수
//               (주소, 전달값 JSON, 점송메서드)  
function SendPost(path, params, method) {
    method = method || "post"; // 메서드가 없으면 기본 POST전송
    var form = document.createElement("form"); // 폼태그 생성
    form.setAttribute("method", method); // 메서드를 지정
    form.setAttribute("action", path); // 액션 지정
    // 폼안에 전송된 데이터 만큼 폼태그 작성
    for (var key in params) {
        var hiddenField = document.createElement("input"); // 입력태그
        hiddenField.setAttribute("type", "hidden"); // 숨김
        hiddenField.setAttribute("name", key); // name을 키로
        hiddenField.setAttribute("value", params[key]); // 값을 json의 값으로
        form.appendChild(hiddenField); // 폼에 추가
    }
    document.body.appendChild(form); // 폼을 body에 추가
    form.submit(); // 폼을 전송
}	
// 호출 : sendPost('.jsp',{"p":1,"s":10,"b":10},"post");
//--------------------------------------------------------------------------
// 이메일 검증 스크립트
function verifyEmail(emailVal) { 
	var reg_email = /^([0-9a-zA-Z_\.-]+)@([0-9a-zA-Z_-]+)(\.[0-9a-zA-Z_-]+){1,2}$/;
	// 검증에 사용할 정규식 변수 regExp에 저장 
	return reg_email.test(emailVal);
}
//--------------------------------------------------------------------------





-------------------------------------------------------------------------------------------------------------------
관련 용어들참조
-------------------------------------------------------------------------------------------------------------------
Spring Security OAuth2 (27)
• Spring REST API + OAuth2 + Angular (2)
• Spring Security OAuth (레거시)와 함께 JWT 사용
• Spring REST API 용 OAuth2 – AngularJS (레거시 OAuth 스택)에서 새로 고침 토큰 처리
Spring MVC OAuth Security API EE
스프링 Security 및 OpenID 연결
• Spring Security OAuth2 (레거시 스택)를 사용한 간단한 싱글 사인온
• OAuth2.0
• Spring Security OAuth2 - E152 1
• OAuth2 Remember Me with Refresh Token (Spring Security OAuth ||
• OAuth Security 애플리케이션에서 로그 아웃 (Spring Security OAuth 레거시 스택 사용)
• Spring Security OAuth2의 새로운 기능-클레임 확인

-------------------------------------------------------------------------------------------------------------------
Spring Security : 인증과 인가 기능을 제공하는 보안 프레임워크
-------------------------------------------------------------------------------------------------------------------
인증(Authentication): 프로그램을 사용할 수 있는 사용자가 맞는지를 확인하는 절차 
  → 인증을 정상적으로 수행하기 위해서는 사용자를 구분할 수 있는 정보 필요 - Credential
  
인가(Authorization) : 인증된 사용자가 요청한 자원에 접근 가능한가를 결정하는 절차(권한이라고 생각하면 됨)
  → 인증 처리 후 권한을 부여 받을 수 있으며 권한은 일반적으로 역할(Role) 형태로 부여
  → 전처럼 인가를 위해 Interceptor를 만들 필요 없이 환경설정만 해주면 된다. 아니면 어노테이션을 이용해도 된다.
  
Spring Security는 인증과 인가를 위해 Principal 객체를 아이디로 사용하고 Credential 객체를 비밀번호로 사용하는
Credential 기반의 인증 방식을 사용
  → Principal 객체에는 사용자의 모든 정보가 들어가 있다.

-------------------------------------------------------------------------------------------------------------------
1. spring-security-web
역할: 웹 애플리케이션의 보안을 위한 기능을 제공합니다.
기능:
2. spring-security-core
역할: Spring Security의 핵심 기능을 제공합니다.
기능:
3. spring-security-config
역할: Spring Security의 설정을 간편하게 관리할 수 있도록 도와줍니다.
기능:
4. spring-security-taglibs
역할: JSP와 같은 뷰에서 보안 관련 태그를 사용할 수 있게 해줍니다.
기능:
이렇게 각 라이브러리는 Spring Security의 다양한 기능을 제공하여 웹 애플리케이션의 보안을 강화하는 데 기여합니 다.
-------------------------------------------------------------------------------------------------------------------




-------------------------------------------------------------------------------------------------------------------
로그아웃을위한 테이블생성
-------------------------------------------------------------------------------------------------------------------
CREATE TABLE persistent_logins (
    username varchar(64) not null,
    series varchar(64) not null,
    token varchar(64) not null,
    last_used timestamp not null,
    PRIMARY KEY (series)
);
-------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------
Spring Security 기능을 구현하기 위한 Spring Bean Configuration File 작성
-------------------------------------------------------------------------------------------------------------------
http:Spring Security 기능을 SpringMVC 프로그램에 적용하기 위한 정보를 제공하는 엘리먼트 (이거는 무조건 있어야 한다. 이거 없으면 Spring Security가 제공하는 필터를 사용할 수 없다) → Spring Security 관련 환경 설정이 시작되는 위치를 제공
auto-config: false 또는 true (기본값) 중 하나를 속성값으로 설정 → auto-config 속성값을 [true]로 설정한 경우 기본값으로 환경 설정
use-expressions:false 또는 true (기본값) 중 하나를 속성값으로 설정
→ use-expressions 속성을 [true]로 설정하면 SpEL 표현식을 사용하여 페이지 접근 여부 설정 가능 → use-expressions 속성을 [false]로 설정하면 SpEL 표현식을 사용불가능
SpEL 표현식(Spring Expression Language): 권한을 표현하는 표현식
→ hasRole('role') : 권한을 가지고 있는 경우를 나타내는 표현식
→ hasAnyRole('rolel','role',...) : 나열된 권한 중 하나를 가지고 있는 경우를 나타내는 표현식 → permitAll: 모든 사용자의 접근 가능을 나타내는 표현식
→ denyAll: 모든 사용자의 접근 불가능을 나타내는 표현식
→ isAnonymous(): Anonymous 사용자(인증 받지 않은 사용자)인 경우에만 접근 가능을 나타내는 표현식 →isRememnberMe() : Remember-me 기능으로 인증받은 사용자인 경우에만 접근 가능을 나타내는 표현식 → •isAuthentucated(): 인증 처리된 사용자(Remember-me 기능으로 인증받은 사용자 포함)인 경우에만 접근 가능을 나타내는 표현식
→ isFullyAuthenticated(): 인증 처리된 사용자(Remember-me 기능으로 인증받은 사용자 제외)인 경우에만 접근 가 능을 나타내는 표현식

-------------------------------------------------------------------------------------------------------------------
이런 SpE | 표현식은 interceptor-url에서 써야 한다.
-------------------------------------------------------------------------------------------------------------------
use-expressions 속성을 [false]로 설정한 경우 access 속성값으로 SpEL 사용 불가능 intercept-url 엘리먼트를 사용해 페이지에 접근 가능한 권한을 하나만 설정 가능
intercept-url: 요청 페이지에 접근 가능을 권한을 설정하는 엘리먼트
→ 특정 페이지에 대한 권한 설정을 먼저하고 나머지는 마지막에 설정하는 것을 권장
pattern 속성 : 요청 페이지의 경로를 속성값으로 설정
→ * 또는 ** 등의 패턴문자를 사용하여 속성값 설정 가능
**
→ * : 폴더에 있는 페이지까지
: 하위폴더까지에 있는 페이지까지
access 속성: 페이지에 접근 가능한 권한(Role)을 속성값으로 설정
→ use-expressions 속성을 [true]로 설정한 경우 SpEL를 사용해 권한 설정 가능 → 권한이 없는 사용자가 페이지를 요청할 경우 AccessDeniedException 발생




-------------------------------------------------------------------------------------------------------------------•
form-login: form 태그를 사용한 로그인 페이지를 설정하기 위한 엘리먼트
-------------------------------------------------------------------------------------------------------------------
login-page 속성 : 아이디와 비밀번호를 입력받기 위한 페이지의 경로를 속성값으로 설정 → 속성을 설정하지 않은 경우 Spring Security에서 제공하는 로그인 페이지 사용
login-processing-url 속성 : 아이디와 비밀번호를 전달받아 인증 처리하는 페이지의 경로를 속성값으로 설정
authentication-manager : 인증 관리자를 등록하기 위한 엘리먼트 → 다양한 형태의 인증 방식 제공
authentication-provider : 인증 제공자를 등록하기 위한 엘리먼트 → 실질적인 인증 작업을 진행하는 기능 제공
user-service : 인증 정보를 등록하기 위한 엘리먼트
→ 인증 처리를 이용해 사용자의 권한 관련 정보를 반환하는 기능
user: 인증을 위한 정보 및 사용자의 권한 정보를 설정하는 엘리먼트
name 속성 : 사용자를 구분하기 위한 식별자(아이디)를 속성값으로 설정
password 속성 : 사용자의 비밀번호를 속성값으로 설정
→ Spring Security 5.0 이상에서는 비밀번호를 반드시 암호화 처리하여 비교되도록 구현
→ password 속성값으로 설정된 비밀번호 앞부분에 {noop}를 붙여 작성하면 암호화 처리 하지 않아도 비교
authorities 속성: 권한(Role)을 속성값으로 설정
→ 권한은 ROLE 기반으로 설정 - 속성값을 ROLE_XXX 형식으로 설정
→ 사용자에게 다수의 권한을 제공할 경우, 기호로 구분하여 권한을 나열해 설정 가능
인증이 성공한 경우 Authentication Manager는 Spring Security 관련 세션(Security ContextHolder)에 인증 및 인 가 관련 정보(Authentication 객체) 저장




-------------------------------------------------------------------------------------------------------------------•
jdbc-user-service : Spring Security가 JDBC를 이용해 인증 처리하기 위한 엘리먼트
-------------------------------------------------------------------------------------------------------------------•
→ JdbcUserDetails Manager 클래스를 사용해 인증과 인가 처리
→ USERS 테이블을 생성해 사용자 정보를 저장하고 AUTHORITIES 테이블을 생성하여 사용자의 권한 정보를 저장할 경 우 SQL 명령을 작성하지 않아도 기본적으로 제공되는 SQL 명령으로 인증 처리 후 사용자 정보(UserDetails 객체)를 반 환
UserDetails 객체에는 아이디, 비밀번호, enabled 정도의 인증정보와 인가정보만 가지고 있다. 그런데 이것뿐만 아니라 사용자 전체 정보를 저장하고 싶으면 별도의 클래스(CustomUserDetails)를 만들어줘야 한다.
→ 인증하려면 SQL 명령이 필요한데 그걸 우리가 만들어주는게 아니라 알아서 만들어서 인증 진행을 해주는거다.
→ 사용자 정보(UserDetails 객체)는 세션에 저장되고 우리는 그걸 가져다가 요청 처리 메소드나 뷰에서 사용할 수 있다.
data-source-ref: Connection 객체를 제공하기 위한 DataSource 관련 클래스의 Spring Bean 식별자(beanName) 을 속성값으로 설정
password-encoder : 암호화 처리된 비밀번호를 비교하기 위한 기능을 제공하는 엘리먼트
ref 속성: PasswordEncoder 인터페이스를 상속받은 클래스의 Spring Bean 식별자(beanName)을 속성값으로
설정


-------------------------------------------------------------------------------------------------------------------
Spring Security Filter의 종류
-------------------------------------------------------------------------------------------------------------------
1. SecurityContextPersistenceFilter:SecurityContextRepository에서 SecurityContext를 가져오거나 생성하는 필터
2. LogoutFilter: 로그아웃 요청을 처리하는 필터
3. UsernamePasswordAuthenticationFilter: 아이디와 비밀번호를 사용하는 Form 기반 유저 인증을 처리하는 필터
   → Authentication 객체를 만들고 AuthenticationManager에게 인증 처리 위임
   → AuthenticationManager는 실질적인 인증에 대한 검증 단계를 총괄하는 AuthenticationProvider에게 인증 처리를 위 임 - UserDetailService와 같은 서비스를 사용해서 인증 처리
4. ConcurrentSessionFilter : 동시 세션과 관련된 필터 - 이중 로그인 방지
5. RememberMeAuthenticationFilter: 세션이 사라지거나 만료 되더라도 쿠키 또는 DB를 사용하여 저장된 토큰을 기반으로 인증 처리하는 필터
6. AnonymousAuthenticationFilter: 사용자 정보가 인증되지 않았다면 익명 사용자 토큰을 반환하는 필터
7. SessionManagementFilter: 로그인 후 Session과 관련된 작업을 처리하는 필터 →여기에 권한관련 정보를 저장한다.
8. ExceptionTranslationFilter: 필터 체인 내에서 발생되는 인증 및 인가 관련 예외를 처리하는 필터
9. FilterSecurityInterceptor : 권한 부여와 관련한 결정을 AccessDecisionManager에게 위임해 권한 부여 결정 및 접근 제어 를 처리하는 필터
10. HeaderWriterFilter: Request의 HTTP 헤더를 검사해 Header를 추가하거나 빼주는 필터
11. CorsFilter: 허가된 사이트나 클라이언트의 요청인지 검사하는 필터
12. CsrfFilter:CSRF Tocken을 사용하여 CSRF 공격을 막아주는 기능을 제공하는 필터


-------------------------------------------------------------------------------------------------------------------
Spring Security를 SpringMVC 프로그램에 적용하여 제공 받을 수 있는 기능
-------------------------------------------------------------------------------------------------------------------
(필터를 사용해서 이 기능들을 제공한다고 생각하면 됨)
다양한 형태(폼로그인 인증, 토큰 기반 인증, OAuth2 기반 인증, LDAP 인증)의 사용자 인증 방법 제공 →OAuth2 기반 인증: 다른 사이트에 인증을 요청하고 받는 것(예: 카카오, 네이버 등)
→ LDAP 인증: 인증을 할 수 있는 서버를 따로 만드는 것
프로그램 사용자의 역할(Role)에 따른 권한 레벨 적용
프로그램에서 제공하는 자원에 대한 접근 제어
데이터 암호화: Custom PasswordEncoder 인터페이스 상속받아 사용
SSL 적용
일반적으로 알려진 웹보안 공격 차단