<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/security 
                           http://www.springframework.org/schema/security/spring-security-4.2.xsd
                           http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- 암호 인코딩 객체 -->
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
	<bean id="entryPoint" class="org.com.mvc.app.security.LoginAuthenticationEntryPoint"></bean>
	<bean id="customUserDetailsService" class="org.com.mvc.app.security.SecurityLoginService"></bean>
	<bean id="customLoginSuccess" class="org.com.mvc.app.security.CustomLoginSuccessHandler"></bean>
	<bean id="customProvider" class="org.com.mvc.app.security.CustomAuthenticationProvider"/>
	
	
	<!-- 
	1.AccessDeniedHandler는 서버에 요청을 할 때 액세스가 가능한지 권한을 체크후 액세스 할 수 없는 요청을 했을시 동작된다.

	2.AuthenticationEntryPoint는 인증이 되지않은 유저가 요청을 했을때 동작된다.
	 -->
	 
	 
	<security:http pattern="/resources/**" 	security="none"></security:http>
	<security:http pattern="/dist/**" 		security="none"></security:http>
	<security:http pattern="/plugins/**" 	security="none"></security:http>
	<security:http pattern="/static/**" 	security="none"></security:http>
	
	<!-- entryPoint 는 로그인 시도를 하지않은 상태에서 특정 권한이있는 메뉴 접근 시 한마디리 인증하지않은상태에서 다른 메뉴 시도시 302 --> 
	<security:http auto-config="true" use-expressions="true" entry-point-ref="entryPoint" >
	
		<!-- <security:csrf disabled="true"/> -->
		
		<security:intercept-url pattern="/tiles/**"	access="permitAll" />
		<security:intercept-url pattern="/"	access="permitAll" />
		<security:intercept-url pattern="/pages/home"	access="permitAll" />
		
		<security:intercept-url pattern="/pages/login/loginPage"	access="isAnonymous()" />
		<security:intercept-url pattern="/loginCtr"	access="permitAll" />
		
		<security:intercept-url pattern="/pages/login/loginCheckSucc" access="permitAll" />
		
		<security:intercept-url pattern="/pages/main/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')" />
		<security:intercept-url pattern="/pages/insa/**" access="hasRole('ROLE_MEMBER')" />
		
		<security:intercept-url pattern="/pages/admin/**" access="hasRole('ROLE_ADMIN')" />
		<security:intercept-url pattern="/pages/admin/**" access="hasRole('ROLE_ADMIN')" />




		<!-- 로그인 설정 -->
		 <security:form-login	
		 		login-page="/pages/login/loginPage"
		 		username-parameter="username" 
				password-parameter="password"
				 
		 		login-processing-url="/loginCtr"
		 		
		 		authentication-success-handler-ref="customLoginSuccess"
		 		
		 		authentication-failure-url="/pages/login/accessFail?msg=userInfoX"
			
		/>
		
		<!-- 로그인 인증을 성공하고 로그인한 상태에서 다른 메뉴 접근 시 권한체크시 권한이없는 사용자 403 -->
		<!-- 권한이 없어서 금지된 URI 접속할 때 보여줄 페이지(403 에러 페이지 대체)  -->
		<security:access-denied-handler error-page="/pages/login/accessDeniedError" />
		

		<!--로그아웃 설정 -->
		<security:logout 
			logout-url="/logOut"
			logout-success-url="/pages/login/logOut?logout=true"
			invalidate-session="true"
			delete-cookies="JSESSIONID, remember-me" />

        <security:remember-me 
            token-validity-seconds="604800" 
            data-source-ref="dataSource" />
            
            
             <!-- 세션 관리 설정 -->
        <security:session-management >        
            <!-- max-sessions : 동일 계정으로 다중 로그인 허용 개수 -->
            <!-- expired-url  : 세션 만료 후 리다이렉트할 URL 설정 -->
            <!-- error-if-maximum-exceeded true : 초과시 새로운 로그인 차단, false : 초과시 기존세션 하나삭제 이걸하기위해선 web.xml에 리스터세팅해야함 HttpSessionEventPublisher -->
            <security:concurrency-control
            		 max-sessions="1"
            		 error-if-maximum-exceeded="false"
             		 expired-url="/pages/login/logOut?sessionExpired=true"/>
            
        </security:session-management>
		
	</security:http>
	
	
	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider ref="customProvider"></security:authentication-provider>
			<security:authentication-provider user-service-ref="customUserDetailsService">
			 <security:password-encoder ref="bcryptPasswordEncoder"/>
			</security:authentication-provider>
	</security:authentication-manager> 
	
	
	<!-- <security:authentication-manager>
		<security:authentication-provider>
			<security:user-service>
				<security:user name="user" password="{noop}user1" authorities="ROLE_MEMBER"/>
				<security:user name="admin" password="{noop}admin1" authorities="ROLE_ADMIN"/>
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager> -->
</beans>

